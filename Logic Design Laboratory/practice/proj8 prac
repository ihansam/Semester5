library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;


entity lcd_display is						-- TOP Module
	Port (FPGA_RSTB : in STD_LOGIC;
			CLK : in STD_LOGIC;
			LCD_A : out STD_LOGIC_VECTOR (1 downto 0);
			LCD_EN : out STD_LOGIC;
			LCD_D : out STD_LOGIC_VECTOR (7 downto 0);
			data_out : in STD_LOGIC;
			load_operand1 : in STD_LOGIC;	-- PUSH1
			load_operand2 : in STD_LOGIC;	-- PUSH2
			load_plus : in STD_LOGIC;		-- PUSH_SW0
			load_minus : in STD_LOGIC;		-- PUSH_SW1
			calculate : in STD_LOGIC;		-- PUSH3
			operand : in STD_LOGIC_VECTOR (3 downto 0));-- DIP_SW[0:3]
end lcd_display;


architecture Behavioral of lcd_display is

	component LCD_test
		port (FPGA_RSTB : in std_logic;
				CLK : in std_logic;
				LCD_A : out std_logic_vector (1 downto 0);
				LCD_EN : out std_logic;
				LCD_D : out std_logic_vector (7 downto 0);
				data_out : in std_logic;
				addr : in std_logic_vector(4 downto 0);
				data : in std_logic_vector(7 downto 0);
				w_enable : out std_logic );
	End component;
	
	component data_gen
		Port (FPGA_RSTB : in STD_LOGIC;
				CLK : in STD_LOGIC;
				w_enable : in STD_LOGIC;
				data_out : out STD_LOGIC;
				addr : out STD_LOGIC_VECTOR (4 downto 0);
				data: out STD_LOGIC_VECTOR (7 downto 0);
				load_operand1 : in std_logic;
				load_operand2 : in std_logic;
				load_plus : in std_logic;
				load_minus : in std_logic;
				calculate : in std_logic;
				operand : in std_logic_vector(3 downto 0));
	end component;
	
	signal data_out_reg, w_enable_reg : std_logic; 	-- noticing signal each other
	signal addr_reg : std_logic_vector(4 downto 0); -- addr and data going
	signal data_reg : std_logic_vector(7 downto 0); -- from data_gen to LCD_test

Begin

	lcd : LCD_test port map(FPGA_RSTB, CLK, LCD_A, LCD_EN, LCD_D,
							data_out_reg, addr_reg, data_reg, w_enable_reg);

	data : data_gen port map(FPGA_RSTB, CLK, w_enable_reg, data_out_reg,
							addr_reg, data_reg,load_operand1, load_operand2,
							load_plus,load_minus, calculate, operand);

end Behavioral;

---------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;


entity LCD_test is						-- initialize lcd, output data
	port (FPGA_RSTB : in std_logic;	-- from register file to lcd module
			CLK : in std_logic;
			LCD_A : out std_logic_vector (1 downto 0);
			LCD_EN : out std_logic;
			LCD_D : out std_logic_vector (7 downto 0);
			data_out : in std_logic;
			addr : in std_logic_vector(4 downto 0);
			data : in std_logic_vector(7 downto 0);
			w_enable : out std_logic );
end LCD_test;


architecture Behavioral of LCD_test is

	type reg is array( 0 to 31 ) of std_logic_vector( 7 downto 0 );
	signal reg_file : reg;				-- Register File using 2D array
	signal w_enable_reg : std_logic;	-- write enable
	signal load_100k : std_logic;		-- generate 100kHz clk
	signal clk_100k : std_logic;
	signal cnt_100k : std_logic_vector (7 downto 0);
	signal load_50 : std_logic;		-- generate 50Hz clk
	signal clk_50 : std_logic;
	signal cnt_50 : std_logic_vector (11 downto 0);
	signal lcd_cnt : std_logic_vector (8 downto 0);	-- for LCD state
	signal lcd_state : std_logic_vector (7 downto 0);
	signal lcd_nstate : std_logic_vector (7 downto 0);
	signal lcd_db : std_logic_vector (7 downto 0);	-- for LCD data

begin
	-- Clock(100kHz) Generator
	process(FPGA_RSTB,CLK,load_100k,cnt_100k)
	Begin
		if FPGA_RSTB = '0' then
			cnt_100k <= (others => '0');
			clk_100k <= '0';
		elsif rising_edge (CLK) then
			if load_100k = '1' then
				cnt_100k <= (others => '0');
				clk_100k <= not clk_100k;
			else
				cnt_100k <= cnt_100k + 1;
			end if;
		end if;
	end process;
	load_100k <= '1' when (cnt_100k = X"13") else '0';
	
	-- Clock(50 Hz) Generator
	process(FPGA_RSTB,clk_100k,load_50,cnt_50) 
	Begin
		if FPGA_RSTB = '0' then
			cnt_50 <= (others => '0');
			clk_50 <= '0';
		elsif rising_edge (clk_100k) then
			if load_50 = '1' then
				cnt_50 <= (others => '0');
				clk_50 <= not clk_50;
			else
				cnt_50 <= cnt_50 + 1;
			end if;
		end if;
	end process;
	load_50 <= '1' when (cnt_50 = X"3E7") else '0'; -- 999

	-- lcd state register (일정 시간마다 lcd state를 바꾸어 줌)
	process(FPGA_RSTB, clk_50)
	Begin
		if FPGA_RSTB = '0' then
			lcd_state <= (others =>'0');
		elsif rising_edge (clk_50) then
			lcd_state <= lcd_nstate;
		end if;
	end process;
	w_enable_reg <= '0' when lcd_state < X"06" else '1';

	-- Register File (data_gen으로부터 data를 읽어와 저장)
	process(FPGA_RSTB, CLK) 
	Begin
		if FPGA_RSTB = '0' then
			for i in 0 to 31 loop
				reg_file(i) <= X"20"; -- initialize reg file
			end loop;
		elsif CLK'event and CLK='1' then
			if w_enable_reg ='1' and data_out ='1' then
				reg_file(conv_integer(addr)) <= data;
			end if;
		end if;
	end process;

	-- lcd_state FSM (각 state에 대한 data 할당 및 다음 state 결정)
	process(FPGA_RSTB, lcd_state) -- lcd_state (X00~X26)
	Begin
		if FPGA_RSTB='0' then
			lcd_nstate <= X"00";
		else
			case lcd_state is	
				when X"00" => lcd_db <= "00111000" ; -- Function set
					lcd_nstate <= X"01" ;				 -- next state
				when X"01" => lcd_db <= "00001000" ; -- Display OFF
					lcd_nstate <= X"02" ;
				when X"02" => lcd_db <= "00000001" ; -- Display clear
					lcd_nstate <= X"03" ;
				when X"03" => lcd_db <= "00000110" ; -- Entry mode set
					lcd_nstate <= X"04" ;
				when X"04" => lcd_db <= "00001100" ; -- Display ON
					lcd_nstate <= X"05" ;
				when X"05" => lcd_db <= "00000011" ; -- Return Home
					lcd_nstate <= X"06" ;
				when X"06" => lcd_db <= reg_file(0) ;-- data from RF
					lcd_nstate <= X"07" ;
				when X"07" => lcd_db <= reg_file(1) ;
					lcd_nstate <= X"08" ;
				when X"08" => lcd_db <= reg_file(2) ;
					lcd_nstate <= X"09" ;
				when X"09" => lcd_db <= reg_file(3) ;
					lcd_nstate <= X"0A" ;
				when X"0A" => lcd_db <= reg_file(4) ;
					lcd_nstate <= X"0B" ;
				when X"0B" => lcd_db <= reg_file(5) ;
					lcd_nstate <= X"0C" ;
				when X"0C" => lcd_db <= reg_file(6) ;
					lcd_nstate <= X"0D" ;
				when X"0D" => lcd_db <= reg_file(7) ;
					lcd_nstate <= X"0E" ;
				when X"0E" => lcd_db <= reg_file(8) ;
					lcd_nstate <= X"0F" ;
				when X"0F" => lcd_db <= reg_file(9) ;
					lcd_nstate <= X"10" ;
				when X"10" => lcd_db <= reg_file(10) ;
					lcd_nstate <= X"11" ;
				when X"11" => lcd_db <= reg_file(11) ;
					lcd_nstate <= X"12" ;
				when X"12" => lcd_db <= reg_file(12) ;
					lcd_nstate <= X"13" ;
				when X"13" => lcd_db <= reg_file(13) ;
					lcd_nstate <= X"14" ;
				when X"14" => lcd_db <= reg_file(14) ;
					lcd_nstate <= X"15" ;
				when X"15" => lcd_db <= reg_file(15) ;
					lcd_nstate <= X"16" ;
				when X"16" => lcd_db <= X"C0" ; -- Change Line
					lcd_nstate <= X"17" ;
				when X"17" => lcd_db <= reg_file(16) ;
					Lcd_nstate <= X"18" ;
				when X"18" => lcd_db <= reg_file(17) ;
					lcd_nstate <= X"19" ;
				when X"19" => lcd_db <= reg_file(18) ;
					lcd_nstate <= X"1A" ;
				when X"1A" => lcd_db <= reg_file(19) ;
					lcd_nstate <= X"1B" ;
				when X"1B" => lcd_db <= reg_file(20) ;
					lcd_nstate <= X"1C" ;
				when X"1C" => lcd_db <= reg_file(21) ;
					lcd_nstate <= X"1D" ;
				when X"1D" => lcd_db <= reg_file(22) ;
					lcd_nstate <= X"1E" ;
				when X"1E" => lcd_db <= reg_file(23) ;
					lcd_nstate <= X"1F" ;
				when X"1F" => lcd_db <= reg_file(24) ;
					lcd_nstate <= X"20" ;
				when X"20" => lcd_db <= reg_file(25) ;
					lcd_nstate <= X"21" ;
				when X"21" => lcd_db <= reg_file(26) ;
					lcd_nstate <= X"22" ;
				when X"22" => lcd_db <= reg_file(27) ;
					lcd_nstate <= X"23" ;
				when X"23" => lcd_db <= reg_file(28) ;
					lcd_nstate <= X"24" ;
				when X"24" => lcd_db <= reg_file(29) ;
					lcd_nstate <= X"25" ;
				when X"25" => lcd_db <= reg_file(30) ;
					lcd_nstate <= X"26" ;
				when X"26" => lcd_db <= reg_file(31) ;
					lcd_nstate <= X"05" ; -- return home
				when others => lcd_db <= (others => '0') ;
			end case;
		end if;
	end process;

	-- Connect signals to LCD module
	LCD_A(1) <= '0';
	LCD_A(0) <= '0' when (lcd_state >= X"00" and lcd_state < X"06") or
						(lcd_state =X"16")
					else '1';
	LCD_EN <= clk_50;	-- LCD_EN <= '0' when w_enable_reg='0' else clk_100;
	LCD_D <= lcd_db; 	-- LCD display data
	w_enable <= w_enable_reg;

end Behavioral;

---------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;


entity data_gen is						-- accept data from push, dip switch
	Port (FPGA_RSTB : in STD_LOGIC;	-- and calculate and save result 
			CLK : in STD_LOGIC;			-- to Register File
			w_enable : in STD_LOGIC;
			data_out : out STD_LOGIC;
			addr : out STD_LOGIC_VECTOR (4 downto 0);
			data : out STD_LOGIC_VECTOR (7 downto 0);
			load_operand1 : in std_logic;
			load_operand2 : in std_logic;
			load_plus : in std_logic;
			load_minus : in std_logic;
			calculate : in std_logic;
			operand : in std_logic_vector(3 downto 0));
end data_gen;


architecture Behavioral of data_gen is

	type reg is array( 0 to 31 ) of std_logic_vector( 7 downto 0 );
	signal reg_file : reg;				-- RF
	signal cnt : std_logic_vector(4 downto 0);	-- 
	signal operand1, operand2 : std_logic_vector(4 downto 0);
	signal result : std_logic_vector(4 downto 0);
	signal operator : std_logic;

Begin
	-- process to write Register File (버튼을 누르면 문자 출력을 위해 RF를 작성)
	process(FPGA_RSTB, CLK)
	begin
		if FPGA_RSTB ='0' then
			for i in 0 to 31 loop
				reg_file(i) <= X"20"; 			-- initialize reg._files
			end loop;
		elsif CLK='1' and CLK'event then
			if load_operand1 = '0' then		-- active 'L'
				if operand < "1010" then 		-- if input is less than 10
					reg_file(0) <= operand+ x"30"; -- match ascii with number
				else 									-- if input is larger than 10
					reg_file(0) <= operand+ x"37"; -- match ascii with number
				end if;				
----------- Insert Your Source Code(1) ------------------------------------------+
			elsif load_operand2 = '0' then		
				if operand < "1010" then 	
					reg_file(2) <= operand+ x"30"; 
				else 						
					reg_file(2) <= operand+ x"37"; 
				end if;
			elsif load_plus = '0' then					-- '+' 출력
				reg_file(1) <= x"2B";
			elsif load_minus = '0' then				-- '-' 출력
				reg_file(1) <= x"2D";	
			elsif calculate <= '0' then				-- calculate 버튼이 눌렸을 때
				reg_file(3) <= x"3D";					-- '=' 출력
				if (operator = '1' and (operand1 < operand2)) then
					reg_file(4) <= x"2D";				-- 계산 결과가 음수일 때 '-'부호 추가
					reg_file(5) <= result(4 downto 4)+ x"30";					
					if result(3 downto 0) < "1010" then 	
						reg_file(6) <= result(3 downto 0)+ x"30";
					else
						reg_file(6) <= result(3 downto 0)+ x"37";
					end if;
				else											-- 계산 결과가 양수일 때 결과 출력
					reg_file(4) <= result(4 downto 4)+ x"30";
					reg_file(6) <= x"20";
					if result(3 downto 0) < "1010" then 	
						reg_file(5) <= result(3 downto 0)+ x"30";
					else
						reg_file(5) <= result(3 downto 0)+ x"37";
					end if;					
				end if;	
---------------------------------------------------------------------------------+
			end if;
		end if;
	end process;
	
	-- process to calculate result (입력을 받아 계산 결과를 도출)
	process(FPGA_RSTB, CLK) 
	Begin
		if FPGA_RSTB ='0' then					
			operand1 <= (others => '0');		-- operand1은 첫 번째 들어오는 operand
			operand2 <= (others => '0');		-- operand2는 두 번째 들어오는 operand
			result <= (others => '0');			-- result는 두 operand를 계산한 결과
			operator <= '0';						-- operaotr는 + 혹은 - 연산자
		elsif CLK='1' and CLK'event then
			if load_operand1 = '0' then		-- 버튼을 눌러 oprand를 op1에 인가
				operand1 <= '0'&operand; -- 5 bits to take care over carry over		
-------- Insert Your Source Code(2) --------------------------------------+
			elsif load_operand2 = '0' then	-- op2 인가
				operand2 <= '0'&operand;		
			elsif load_plus = '0' then			-- + 버튼을 눌러 연산자를 +로 설정
				operator <= '0';					-- operator는 0을 +로 함
			elsif load_minus = '0' then		-- - 버튼을 눌러 연산자를 -로 설정
				operator <= '1';					-- operator는 1을 -로 함
			end if;	
			
			if operator = '0' then				-- operator 값에 따라 result에 
				result <= (operand1+ operand2);	-- 계산 결과를 저장
			elsif (operand1 < operand2) then		-- 뺄셈의 결과가 음수인 경우는
				result <= (operand2 - operand1);	-- 순서를 바꾸어 계산
			else
				result <= (operand1 - operand2);
-------------------------------------------------------------------------+
			end if;
		end if;
	end process;

	-- process to send data from register to output
	process(FPGA_RSTB, CLK)
	Begin
		if FPGA_RSTB ='0' then
			cnt <= (others => '0');
			data_out <= '0';
		elsif CLK='1' and CLK'event then
			if w_enable = '1' then	-- 쓰기 가능할 때 cnt를 1씩 늘려가고
				data <= reg_file (conv_integer (cnt));
				addr <= cnt;			-- cnt를 addr로 하는 RF의 데이터를
				data_out <= '1';		-- data로 내보내고 data가 나감을 표시
				if cnt= X"1F" then -- 31
					cnt <= (others =>'0');
				else
					cnt <= cnt + 1;
				end if;
			else
				data_out <= '0'; -- do not write
			end if;
		end if;
	end process;

end Behavioral;