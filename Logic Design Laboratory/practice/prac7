library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;


entity LCD_test is
	port (FPGA_RSTB : IN std_logic;							-- Reset
			FPGA_CLK : IN std_logic; 							-- FPFA clock
			LCD_A : OUT std_logic_vector (1 downto 0); 	-- RS,RW signal
			LCD_EN : OUT std_logic; 							-- LCD Enable
			LCD_D : OUT std_logic_vector (7 downto 0)); 	-- LCD data
end LCD_test;


architecture Behavioral of LCD_test is

	-- 100 KHz Clock
	signal load_100k : std_logic;
	signal clk_100k : std_logic;
	signal cnt_100k : std_logic_vector (7 downto 0);
	-- 50 Hz clock
	signal load_50 : std_logic;
	signal clk_50 : std_logic; 
	signal cnt_50 : std_logic_vector (11 downto 0);
	
	signal lcd_cnt : std_logic_vector (8 downto 0);		-- LCD state & Enable
	signal lcd_state : std_logic_vector (7 downto 0); 	-- LCD state
	signal lcd_db : std_logic_vector (7 downto 0); 		-- LCD data

begin
	-- Make 100kHz Clock	
	process(FPGA_RSTB, FPGA_CLK, load_100k, cnt_100k)
	begin
		if FPGA_RSTB = '0' then
			cnt_100k <= (others => '0');
			clk_100k <= '0';
		elsif rising_edge (FPGA_CLK) then
			if load_100k = '1' then				-- flip clk_100k
				cnt_100k <= (others => '0');	-- whenever count 20 clocks
				clk_100k <= not clk_100k;
			else
				cnt_100k <= cnt_100k + 1;
			end if;
		end if;
	end process;
	load_100k <= '1' when (cnt_100k = X"13") else '0';	-- 19

	-- Make 50Hz Clock
	process(FPGA_RSTB, clk_100k, load_50, cnt_50)
	begin
		if FPGA_RSTB = '0' then
			cnt_50 <= (others => '0');
			clk_50 <= '0';
		elsif rising_edge (clk_100k) then
			if load_50 = '1' then				-- flip clk_50
				cnt_50 <= (others => '0');		-- whenever count 1000 clk_100k
				clk_50 <= not clk_50;
			else
				cnt_50 <= cnt_50 + 1;
			end if;
		end if;
	end process;
	load_50 <= '1' when (cnt_50 = X"3E7") else '0';	-- 999
	
	-- Assign LCD State
	process(FPGA_RSTB, clk_50, lcd_cnt)
	begin
		if FPGA_RSTB = '0' then
			lcd_cnt <= (others => '0');
		elsif rising_edge (clk_50) then
			if (lcd_cnt >= "001010110") then		-- declare range of state * 2 = 86
				lcd_cnt <= lcd_cnt;					-- enough to cover all state
			else											-- (this system need 38 states)
				lcd_cnt <= lcd_cnt + 1;
			end if;
		end if;
	end process;
	lcd_state <= lcd_cnt (8 downto 1); 			-- 8 bits state declare
	
   -- Output of each output state
	process(lcd_state)
	begin
		case lcd_state is
			when X"00" => lcd_db <= "00111000"; -- Function set
			when X"01" => lcd_db <= "00001000"; -- Display OFF
			when X"02" => lcd_db <= "00000001"; -- Display clear
			when X"03" => lcd_db <= "00000110"; -- Entry mode set
			when X"04" => lcd_db <= "00001100"; -- Display ON
			when X"05" => lcd_db <= "00000011"; -- Return Home 
			
			when X"06" => lcd_db <= X"3C"; 		-- < 
			when X"07" => lcd_db <= X"33"; 		-- 3
			when X"08" => lcd_db <= X"31"; 		-- 1 
			when X"09" => lcd_db <= X"31"; 		-- 1 
			when X"0A" => lcd_db <= X"39"; 		-- 9 
			when X"0B" => lcd_db <= X"35"; 		-- 5 
			when X"0C" => lcd_db <= X"31";		-- 1 
			when X"0D" => lcd_db <= X"3E"; 		-- > 
			when X"0E" => lcd_db <= X"3C"; 		-- <
			when X"0F" => lcd_db <= X"33"; 		-- 3 
			when X"10" => lcd_db <= X"31"; 		-- 1 
			when X"11" => lcd_db <= X"30"; 		-- 0 
			when X"12" => lcd_db <= X"35"; 		-- 5 
			when X"13" => lcd_db <= X"38"; 		-- 8 
			when X"14" => lcd_db <= X"31"; 		-- 1 
			when X"15" => lcd_db <= X"3E"; 		-- >
			
			when X"16" => lcd_db <= X"C0"; 		-- change Line   
	
			when X"17" => lcd_db <= X"20"; 		-- space
			when X"18" => lcd_db <= X"4A"; 		-- J 
			when X"19" => lcd_db <= X"20"; 		-- space
			when X"1A" => lcd_db <= X"4B"; 		-- K
			when X"1B" => lcd_db <= X"20"; 		-- space 
			when X"1C" => lcd_db <= X"44"; 		-- D 
			when X"1D" => lcd_db <= X"21"; 		-- !
			when X"1E" => lcd_db <= X"20"; 		-- space 
			when X"1F" => lcd_db <= X"20"; 		-- space 
			when X"20" => lcd_db <= X"4C"; 		-- L 
			when X"21" => lcd_db <= X"20"; 		-- space 
			when X"22" => lcd_db <= X"48"; 		-- H
			when X"23" => lcd_db <= X"20"; 		-- space 
			when X"24" => lcd_db <= X"4A"; 		-- J
			when X"25" => lcd_db <= X"3F"; 		-- ? 
			when X"26" => lcd_db <= X"20"; 		-- space 
			when others => lcd_db <= (others => '0');
		end case;
	end process;
	
	-- Connect Internal Signal with Port
    -- A(0) : RS, A(1) : R/W, 00 when giving instruction, 01 giving data
    
	LCD_A(1) <= '0';
	LCD_A(0) <= '0' when (lcd_state >= X"00" and lcd_state < X"06")
							or (lcd_state = X"16") -- change line
						 else '1';
	-- Enable signal
	LCD_EN <= not lcd_cnt(0);
	-- data bus line signal
	LCD_D <= lcd_db;

end Behavioral;